"""
Django settings for proj_judge project.

Generated by 'django-admin startproject' using Django 3.0.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import configparser
import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


CONFIG_PATH = os.path.join(BASE_DIR, "config", "config.ini")
CONFIG = configparser.ConfigParser()
CONFIG.read(CONFIG_PATH)
SETTING_CONFIG = CONFIG["SETTING"]


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = SETTING_CONFIG["SECRET_KEY"].strip('"')
assert len(SECRET_KEY) >= 50, len(SECRET_KEY)
SECRET_KEY = SECRET_KEY[:50]

# SECURITY WARNING: don't run with debug turned on in production!
__DEBUG_FLAG_STR = SETTING_CONFIG["DEBUG"]
assert __DEBUG_FLAG_STR in ("0", "1")
DEBUG = bool(int(__DEBUG_FLAG_STR))


__STAGING_FLAG_STR = SETTING_CONFIG["STAGING"]
assert __STAGING_FLAG_STR in ("0", "1")
STAGING = bool(int(__STAGING_FLAG_STR))
STAGING_PREFIX = "_staging_/034NsYeBJIIw4eTXO9/"


__IS_LOCAL_FLAG_STR = SETTING_CONFIG["IS_LOCAL"]
assert __IS_LOCAL_FLAG_STR in ("0", "1")
IS_LOCAL = bool(int(__IS_LOCAL_FLAG_STR))


__SANDBOX_DIR_FLAG_STR = SETTING_CONFIG["SANDBOX_DIR"]
assert isinstance(__SANDBOX_DIR_FLAG_STR, str)
SANDBOX_DIR = __SANDBOX_DIR_FLAG_STR

__ALTERNATIVE_SERVER_HOSTNAME_LIST = SETTING_CONFIG["ALTERNATIVE_SERVER_HOSTNAME_LIST"]
assert isinstance(__ALTERNATIVE_SERVER_HOSTNAME_LIST, str)
ALTERNATIVE_SERVER_HOSTNAME_LIST = __ALTERNATIVE_SERVER_HOSTNAME_LIST.split("|")


PORT: int = 8045 if STAGING else 8044

SOFTWARE_NAME = SETTING_CONFIG["SOFTWARE_NAME"]
ENV_ID: str = "__".join(
    (
        SOFTWARE_NAME,
        ["SERVER", "LOCAL"][IS_LOCAL],
        ["PRODUCTION", "STAGING"][STAGING],
    )
)

ALLOWED_HOSTS = ALTERNATIVE_SERVER_HOSTNAME_LIST


# Directory pointing the base directory for containing the following data:
# - db.sqlite3
# - external_data/
# - FileField local storages (e.g. submission_files)
# This option is for swapping the complete application data.
BASE_APP_DATA_DIR = BASE_DIR

if SANDBOX_DIR:
    BASE_APP_DATA_DIR = os.path.join(BASE_DIR, SANDBOX_DIR, "proj_judge")


# Display settings
print(f"{DEBUG=}")
print(f"{STAGING=}")
print(f"{ALLOWED_HOSTS=}")
print(f"{SANDBOX_DIR=}")


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_rq",
    "app_judge",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "proj_judge.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "proj_judge.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(BASE_APP_DATA_DIR, "db.sqlite3"),
    }
}
if SANDBOX_DIR:
    MIGRATION_MODULES = {"app_judge": SANDBOX_DIR + ".proj_judge.migrations"}

EXTERNAL_DATA_PATH = os.path.join(BASE_APP_DATA_DIR, "external_data")


# Media
# https://docs.djangoproject.com/en/3.1/topics/files/
MEDIA_ROOT = EXTERNAL_DATA_PATH

DATABASE_SUBMISSION_FILE_ROOT_PATH = "submission_files"


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = "/static/"

################################################################
# RQ settings

JUDGE_QUEUE_REDIS_HOST = SETTING_CONFIG["JUDGE_QUEUE_REDIS_HOST"]
JUDGE_QUEUE_REDIS_PORT = int(SETTING_CONFIG["JUDGE_QUEUE_REDIS_PORT"])

SUBMISSION_QUEUE_NAME = f"submission_queue__{ENV_ID}"
RQ_QUEUES = {
    SUBMISSION_QUEUE_NAME: {
        "HOST": JUDGE_QUEUE_REDIS_HOST,
        "PORT": JUDGE_QUEUE_REDIS_PORT,
        "DB": 0,
        "PASSWORD": "",
        "DEFAULT_TIMEOUT": 300,
    },
}

################################################################
# Judge settings

JUDGE_CONFIG = CONFIG["JUDGE"]
JUDGE_API_TOKEN = JUDGE_CONFIG["API_TOKEN"]
JUDGE_FRONT_ENDPOINT_URL = JUDGE_CONFIG["FRONT_ENDPOINT_URL"]
JUDGE_FRONT_USE_UNIX_DOMAIN_SOCKET = JUDGE_CONFIG["FRONT_USE_UNIX_DOMAIN_SOCKET"]
