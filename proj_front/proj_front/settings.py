"""
Django settings for proj_front project.

Generated by 'django-admin startproject' using Django 3.0.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""
import os
import sys
from typing import List

import tomli
from django.contrib.messages import constants as messages
from django.utils.translation import gettext_lazy as _
from pydantic import ConstrainedStr

from extension.pydantic_strict import StrictBaseModel

# cf. <https://stackoverflow.com/questions/67651947/django-error-improperlyconfigured-the-app-label-fontawesome-free-is-not-a-va> # noqa:E501
sys.modules["fontawesome_free"] = __import__("fontawesome-free")


class DjangoSecretKey(ConstrainedStr):
    min_length = 50
    max_length = 50


class DjangoSetting(StrictBaseModel):
    SECRET_KEY: DjangoSecretKey
    DEBUG: bool
    STAGING: bool
    IS_LOCAL: bool
    SANDBOX_DIR: str
    SOFTWARE_NAME: str
    SERVER_HOSTNAME: str
    ALTERNATIVE_SERVER_HOSTNAME_LIST: List[str]


# Build paths inside the project like this: os.path.join(_BASE_DIR, ...)
_BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


CONFIG_DIR = os.path.join(_BASE_DIR, "config")
CONFIG_PATH = os.path.join(CONFIG_DIR, "config.toml")

with open(CONFIG_PATH, "rb") as f_config:
    CONFIG = tomli.load(f_config)


DJANGO_SETTING = DjangoSetting.parse_obj(CONFIG["DJANGO_SETTING"])


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = DJANGO_SETTING.SECRET_KEY

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = DJANGO_SETTING.DEBUG

STAGING = DJANGO_SETTING.STAGING

IS_LOCAL = DJANGO_SETTING.IS_LOCAL


SANDBOX_DIR = DJANGO_SETTING.SANDBOX_DIR


SOFTWARE_NAME = DJANGO_SETTING.SOFTWARE_NAME

SERVER_HOSTNAME = DJANGO_SETTING.SERVER_HOSTNAME
ALLOWED_HOSTS = [SERVER_HOSTNAME] + DJANGO_SETTING.ALTERNATIVE_SERVER_HOSTNAME_LIST

# NOTE Necessary for "Google Sign-In"
#     cf. <https://stackoverflow.com/questions/68438293/the-given-origin-is-not-allowed-for-the-given-client-id-gsi> # noqa:E501
# NOTE Default: 'same-origin'
SECURE_REFERRER_POLICY = "strict-origin-when-cross-origin"

# NOTE Necessary to handle the "X-Forwarded-Proto" header in the production environment.
#     cf. nginx/conf.d/plags_ut.conf: `proxy_set_header X-Forwarded-Proto $scheme;`
# NOTE Default: None
# cf. <https://docs.djangoproject.com/en/4.1/ref/settings/#secure-proxy-ssl-header>
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# Directory pointing the base directory for containing the following data:
# - db.sqlite3
# - external_data/
# - FileField local storages (e.g. submission_files)
# This option is for swapping the complete application data.
BASE_APP_DATA_DIR = _BASE_DIR

if SANDBOX_DIR:
    assert _BASE_DIR == os.getcwd(), (_BASE_DIR, os.getcwd())
    BASE_APP_DATA_DIR = os.path.join(SANDBOX_DIR, "proj_front")


def _debug_print(message: str) -> None:
    print(message, file=sys.stderr)


# Display python environment
print(f"{sys.version = }")
# NOTE pylint, mypy の出力に含まれないよう、ローカル動作時は除外する
if not IS_LOCAL:
    print(f"{sys.executable = }")


# Display settings
_debug_print(f"{DEBUG=}")
_debug_print(f"{STAGING=}")
_debug_print(f"{ALLOWED_HOSTS=}")
_debug_print(f"{SANDBOX_DIR=}")


# Application definition

INSTALLED_APPS = (
    [
        "django.contrib.admin",
        "django.contrib.auth",
        "django.contrib.contenttypes",
        "django.contrib.sessions",
        "django.contrib.messages",
        "django.contrib.staticfiles",
        "corsheaders",
        "mathfilters",
        "strawberry.django",
    ]
    + (["debug_toolbar"] if DEBUG else [])
    + [
        "fontawesome_free",
        "app_front",
    ]
)

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",  # for trans in template
    "corsheaders.middleware.CorsMiddleware",  # for CORS
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]
if DEBUG:
    MIDDLEWARE = ["debug_toolbar.middleware.DebugToolbarMiddleware"] + MIDDLEWARE


ROOT_URLCONF = "proj_front.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
            # NOTE デバッグ時に有効化しておくとtemplateの型エラーを発見しやすい説 出すぎて止めた気がする
            # 'string_if_invalid': 'INVALID_TAMPLATE(%s)' if DEBUG else ''
            # NOTE キャッシュしたいなぁ...
            # "loaders": [
            #     (
            #         "django.template.loaders.cached.Loader",
            #         [
            #             "django.template.loaders.filesystem.Loader",
            #             "django.template.loaders.app_directories.Loader",
            #             "path.to.custom.Loader",
            #         ],
            #     )
            # ],
        },
    },
]

WSGI_APPLICATION = "proj_front.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(BASE_APP_DATA_DIR, "db.sqlite3"),
    }
}
if SANDBOX_DIR:
    MIGRATION_MODULES = {"app_front": SANDBOX_DIR + ".proj_front.migrations"}

# Media
# https://docs.djangoproject.com/en/3.1/topics/files/
MEDIA_ROOT = BASE_APP_DATA_DIR


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"  # noqa:E501
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Tokyo"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# https://blog.braham.biz/getting-started-with-translating-a-django-application-d85ec34e505
LANGUAGES = (
    ("en", _("English")),
    # ('ja', _('Japanese')),
)

LOCALE_PATHS = [
    os.path.join(BASE_APP_DATA_DIR, "locale"),
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATICFILES_STORAGE = (
    "django.contrib.staticfiles.storage.StaticFilesStorage"
    if DEBUG
    else "django.contrib.staticfiles.storage.ManifestStaticFilesStorage"
)
STATIC_URL = "/static/" if IS_LOCAL else "/plags_ut/static/"
STATIC_ROOT = (
    ("" if DEBUG else os.path.join(BASE_APP_DATA_DIR, "__debug__static"))
    if IS_LOCAL
    else f"/var/www/{SERVER_HOSTNAME}/plags_ut/static"
)
_debug_print(f"{STATIC_ROOT=}")


# CORS settings

CORS_ALLOWED_ORIGINS = ["https://" + SERVER_HOSTNAME]
if SERVER_HOSTNAME == "localhost:8041":
    CORS_ALLOWED_ORIGINS = ["http://localhost"]


# Auth settings
# cf. <https://docs.djangoproject.com/en/3.2/ref/settings/#auth>

AUTH_USER_MODEL = "app_front.User"

LOGIN_REDIRECT_URL = "profile"  # default: /accounts/profile/
LOGIN_URL = "login"  # default: /accounts/login/
LOGOUT_REDIRECT_URL = "loggedout"


# Message tags

MESSAGE_TAGS = {
    messages.DEBUG: "dark",
    messages.ERROR: "danger",
}

# Debug toolbar

INTERNAL_IPS = ["127.0.0.1"]

DEBUG_TOOLBAR_PANELS = [
    "debug_toolbar.panels.history.HistoryPanel",
    "debug_toolbar.panels.versions.VersionsPanel",
    "debug_toolbar.panels.timer.TimerPanel",
    "debug_toolbar.panels.settings.SettingsPanel",
    "debug_toolbar.panels.headers.HeadersPanel",
    "debug_toolbar.panels.request.RequestPanel",
    "debug_toolbar.panels.sql.SQLPanel",
    "debug_toolbar.panels.staticfiles.StaticFilesPanel",
    "debug_toolbar.panels.templates.TemplatesPanel",
    "debug_toolbar.panels.cache.CachePanel",
    "debug_toolbar.panels.signals.SignalsPanel",
    "debug_toolbar.panels.logging.LoggingPanel",
    "debug_toolbar.panels.redirects.RedirectsPanel",
    "debug_toolbar.panels.profiling.ProfilingPanel",
]

# Application-specific settings
# NOTE loaded on app_front/config/config.py
APP_SETTING = CONFIG["APP_SETTING"]
